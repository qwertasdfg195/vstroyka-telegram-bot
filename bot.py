import asyncio
import os
import logging
from typing import Optional
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, Text
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

if not TOKEN or not ADMIN_ID or not SPREADSHEET_ID:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BOT_TOKEN, ADMIN_ID –∏–ª–∏ SPREADSHEET_ID")

try:
    ADMIN_ID = int(ADMIN_ID)
except ValueError:
    raise ValueError("ADMIN_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

# === Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
sheet: Optional[gspread.Worksheet] = None

def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
    global sheet
    try:
        creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
        client = gspread.authorize(creds)
        sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–õ–∏—Å—Ç1")
        logger.info("Google Sheets —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        try:
            headers = sheet.row_values(1)
            if not headers:
                sheet.append_row(["–î–∞—Ç–∞", "Username", "–†–∞–∑–º–µ—Ä—ã", "–°—Ç–∏–ª—å", "–ú–∞—Ç–µ—Ä–∏–∞–ª", "–ò–¥–µ–∏"])
                logger.info("–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏: {e}")
            
    except FileNotFoundError:
        logger.error("–§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sheet = None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        sheet = None

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class Form(StatesGroup):
    size = State()
    style = State()
    material = State()
    idea = State()
    confirmation = State()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåü –ì–æ—Ç–æ–≤—ã–µ –∫—É—Ö–Ω–∏")],
            [KeyboardButton(text="üå± –°–æ–±—Ä–∞—Ç—å —Å–≤–æ—é –∫—É—Ö–Ω—é")],
            [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å")]
        ],
        resize_keyboard=True
    )

def get_style_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π"), KeyboardButton(text="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π")],
            [KeyboardButton(text="–ú–∏–Ω–∏–º–∞–ª–∏–∑–º"), KeyboardButton(text="–ü—Ä–æ–≤–∞–Ω—Å")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_material_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–î–§"), KeyboardButton(text="–î–°–ü")],
            [KeyboardButton(text="–®–ø–æ–Ω"), KeyboardButton(text="–ú–∞—Å—Å–∏–≤ –¥–µ—Ä–µ–≤–∞")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_confirmation_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )

def get_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

# === –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ===
def validate_size(size_text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–æ–≤"""
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä
    return any(char.isdigit() for char in size_text) and len(size_text.strip()) > 0

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
        f"–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–í—Å—Ç—Ä–æ–π–∫–∞ –ú–µ–±–µ–ª—å¬ª.\n"
        f"–ü–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é –∫—É—Ö–Ω—é!\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await message.answer(welcome_text, reply_markup=get_main_keyboard())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")

@dp.message(Command("help"))
async def help_command(message: types.Message):
    help_text = (
        "ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
        "üìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –≥–æ—Ç–æ–≤—ã—Ö –∫—É—Ö–æ–Ω—å\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫—É—Ö–Ω—é\n"
        "‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
        "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏"
    )
    await message.answer(help_text)

@dp.message(Command("cancel"))
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.", reply_markup=get_main_keyboard())
        return
    
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@dp.message(Text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
async def main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

@dp.message(Text("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"))
async def contacts(message: types.Message):
    contacts_text = (
        "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
        "üè¢ –û–û–û ¬´–í—Å—Ç—Ä–æ–π–∫–∞ –ú–µ–±–µ–ª—å¬ª\n"
        "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n"
        "üìß Email: info@vstroyka-mebel.ru\n"
        "üåê –°–∞–π—Ç: www.vstroyka-mebel.ru\n"
        "üìç –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1\n\n"
        "üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n"
        "–ü–Ω-–ü—Ç: 9:00 - 18:00\n"
        "–°–±: 10:00 - 16:00\n"
        "–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π"
    )
    await message.answer(contacts_text)

@dp.message(Text("‚ÑπÔ∏è –û –Ω–∞—Å"))
async def about_us(message: types.Message):
    about_text = (
        "‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–í—Å—Ç—Ä–æ–π–∫–∞ –ú–µ–±–µ–ª—å¬ª:\n\n"
        "üèÜ –ë–æ–ª–µ–µ 10 –ª–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ –∫—É—Ö–æ–Ω–Ω–æ–π –º–µ–±–µ–ª–∏\n"
        "üë• –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤\n"
        "üîß –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ\n"
        "‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ 2 –≥–æ–¥–∞\n"
        "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏ —Å–±–æ—Ä–∫–∞ –ø–æ –≤—Å–µ–π –æ–±–ª–∞—Å—Ç–∏\n"
        "üí∞ –†–∞—Å—Å—Ä–æ—á–∫–∞ –±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç\n\n"
        "–ú—ã —Å–æ–∑–¥–∞–µ–º –∫—É—Ö–Ω–∏ –≤–∞—à–µ–π –º–µ—á—Ç—ã! üåü"
    )
    await message.answer(about_text)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –∫–∞—Ç–∞–ª–æ–≥–∞ ===
@dp.message(Text("üåü –ì–æ—Ç–æ–≤—ã–µ –∫—É—Ö–Ω–∏"))
async def send_catalog(message: types.Message):
    try:
        file = FSInputFile("catalog.pdf")
        await message.answer_document(
            file, 
            caption="üìò –ù–∞—à –∫–∞—Ç–∞–ª–æ–≥ –≥–æ—Ç–æ–≤—ã—Ö –∫—É—Ö–æ–Ω—å\n\n"
                   "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏.\n"
                   "–î–ª—è –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∏–∑ –º–µ–Ω—é!"
        )
        logger.info(f"–ö–∞—Ç–∞–ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except FileNotFoundError:
        await message.answer(
            "üìÑ –ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ç–æ–≤—ã—Ö –∫—É—Ö–Ω—è—Ö.",
            reply_markup=get_main_keyboard()
        )
        logger.error("–§–∞–π–ª catalog.pdf –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")

# === –§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ ===
@dp.message(Text("üå± –°–æ–±—Ä–∞—Ç—å —Å–≤–æ—é –∫—É—Ö–Ω—é"))
async def start_form(message: types.Message, state: FSMContext):
    await message.answer(
        "üèóÔ∏è –°–æ–∑–¥–∞–µ–º –≤–∞—à—É –∏–¥–µ–∞–ª—å–Ω—É—é –∫—É—Ö–Ω—é!\n\n"
        "üìè –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –∫—É—Ö–Ω–∏:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 3–º √ó 2.5–º –∏–ª–∏ 300—Å–º √ó 250—Å–º)",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(Form.size)

@dp.message(Form.size)
async def process_size(message: types.Message, state: FSMContext):
    if message.text in ["üîô –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        await handle_navigation(message, state)
        return
    
    if not validate_size(message.text):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 3–º √ó 2.5–º –∏–ª–∏ 300—Å–º √ó 250—Å–º",
            reply_markup=get_back_keyboard()
        )
        return
    
    await state.update_data(size=message.text)
    await message.answer(
        "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∫—É—Ö–Ω–∏:",
        reply_markup=get_style_keyboard()
    )
    await state.set_state(Form.style)

@dp.message(Form.style)
async def process_style(message: types.Message, state: FSMContext):
    if message.text in ["üîô –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        await handle_navigation(message, state)
        return
    
    valid_styles = ["–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ú–∏–Ω–∏–º–∞–ª–∏–∑–º", "–ü—Ä–æ–≤–∞–Ω—Å"]
    if message.text not in valid_styles:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_style_keyboard()
        )
        return
    
    await state.update_data(style=message.text)
    await message.answer(
        "üß± –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª —Ñ–∞—Å–∞–¥–æ–≤:",
        reply_markup=get_material_keyboard()
    )
    await state.set_state(Form.material)

@dp.message(Form.material)
async def process_material(message: types.Message, state: FSMContext):
    if message.text in ["üîô –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        await handle_navigation(message, state)
        return
    
    valid_materials = ["–ú–î–§", "–î–°–ü", "–®–ø–æ–Ω", "–ú–∞—Å—Å–∏–≤ –¥–µ—Ä–µ–≤–∞"]
    if message.text not in valid_materials:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_material_keyboard()
        )
        return
    
    await state.update_data(material=message.text)
    await message.answer(
        "üí° –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏—è—Ö:\n\n"
        "‚Ä¢ –¶–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ –û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –ë—é–¥–∂–µ—Ç\n"
        "‚Ä¢ –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–Ω–µ—Ç\", –µ—Å–ª–∏ –æ—Å–æ–±—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π –Ω–µ—Ç.",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(Form.idea)

@dp.message(Form.idea)
async def process_idea(message: types.Message, state: FSMContext):
    if message.text in ["üîô –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        await handle_navigation(message, state)
        return
    
    await state.update_data(idea=message.text)
    data = await state.get_data()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    summary = (
        "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É:\n\n"
        f"üìè –†–∞–∑–º–µ—Ä—ã: {data['size']}\n"
        f"üé® –°—Ç–∏–ª—å: {data['style']}\n"
        f"üß± –ú–∞—Ç–µ—Ä–∏–∞–ª: {data['material']}\n"
        f"üí° –ü–æ–∂–µ–ª–∞–Ω–∏—è: {data['idea']}\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    
    await message.answer(summary, reply_markup=get_confirmation_keyboard())
    await state.set_state(Form.confirmation)

@dp.message(Form.confirmation)
async def process_confirmation(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
        await send_application(message, state)
    elif message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å":
        await message.answer(
            "–ö–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
            "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å —Ä–∞–∑–º–µ—Ä–æ–≤:",
            reply_markup=get_back_keyboard()
        )
        await state.set_state(Form.size)
    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_confirmation_keyboard()
        )

async def send_application(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –∑–∞–ø–∏—Å—å –≤ Google Sheets"""
    data = await state.get_data()
    user = message.from_user
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_summary = (
        f"üì• –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ö–£–•–ù–Æ\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name or ''} {user.last_name or ''}\n"
        f"üì± Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üÜî ID: {user.id}\n\n"
        f"üìè –†–∞–∑–º–µ—Ä—ã: {data['size']}\n"
        f"üé® –°—Ç–∏–ª—å: {data['style']}\n"
        f"üß± –ú–∞—Ç–µ—Ä–∏–∞–ª: {data['material']}\n"
        f"üí° –ü–æ–∂–µ–ª–∞–Ω–∏—è: {data['idea']}\n\n"
        f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    try:
        await bot.send_message(chat_id=ADMIN_ID, text=admin_summary)
        logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
    if sheet:
        try:
            now = datetime.now().strftime("%d.%m.%Y %H:%M")
            row = [
                now,
                f"{user.first_name or ''} {user.last_name or ''}".strip(),
                user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω",
                str(user.id),
                data['size'],
                data['style'],
                data['material'],
                data['idea']
            ]
            sheet.append_row(row)
            logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ Google Sheets")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
    else:
        logger.warning("Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã")

    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\n"
        "üë®‚Äçüíº –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è "
        "–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.\n\n"
        "üìû –ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ \"–ö–æ–Ω—Ç–∞–∫—Ç—ã\".",
        reply_markup=get_main_keyboard()
    )
    
    await state.clear()

async def handle_navigation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        current_state = await state.get_state()
        if current_state == Form.size:
            await state.clear()
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
        elif current_state == Form.style:
            await message.answer(
                "üìè –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –∫—É—Ö–Ω–∏:",
                reply_markup=get_back_keyboard()
            )
            await state.set_state(Form.size)
        elif current_state == Form.material:
            await message.answer(
                "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∫—É—Ö–Ω–∏:",
                reply_markup=get_style_keyboard()
            )
            await state.set_state(Form.style)
        elif current_state == Form.idea:
            await message.answer(
                "üß± –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª —Ñ–∞—Å–∞–¥–æ–≤:",
                reply_markup=get_material_keyboard()
            )
            await state.set_state(Form.material)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message()
async def unknown_message(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
        )
    else:
        await message.answer(
            "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
            reply_markup=get_main_keyboard()
        )

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    init_google_sheets()
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())