import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, Text
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

if not TOKEN or not ADMIN_ID or not SPREADSHEET_ID:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BOT_TOKEN, ADMIN_ID –∏–ª–∏ SPREADSHEET_ID")

try:
    ADMIN_ID = int(ADMIN_ID)
except ValueError:
    raise ValueError("ADMIN_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

# === Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
try:
    creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–õ–∏—Å—Ç1")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
    sheet = None

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class Form(StatesGroup):
    size = State()
    style = State()
    material = State()
    idea = State()

# === –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é ===
@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üåü –ì–æ—Ç–æ–≤—ã–µ –∫—É—Ö–Ω–∏")],
        [KeyboardButton(text="üå± –°–æ–±—Ä–∞—Ç—å —Å–≤–æ—é –∫—É—Ö–Ω—é")]
    ], resize_keyboard=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –í—Å—Ç—Ä–æ–π–∫–∞ –ú–µ–±–µ–ª—å.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –∫–∞—Ç–∞–ª–æ–≥–∞ ===
@dp.message(Text("üåü –ì–æ—Ç–æ–≤—ã–µ –∫—É—Ö–Ω–∏"))
async def send_catalog(message: types.Message):
    try:
        file = FSInputFile("catalog.pdf")
        await message.answer_document(file, caption="üìò –ù–∞—à –∫–∞—Ç–∞–ª–æ–≥ –∫—É—Ö–æ–Ω—å")
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –ó–∞–ø—É—Å–∫ —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏ ===
@dp.message(Text("üå± –°–æ–±—Ä–∞—Ç—å —Å–≤–æ—é –∫—É—Ö–Ω—é"))
async def start_form(message: types.Message, state: FSMContext):
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã (–≤ —Å–º, —à–∏—Ä–∏–Ω–∞ √ó –≤—ã—Å–æ—Ç–∞):")
    await state.set_state(Form.size)

@dp.message(Form.size)
async def process_size(message: types.Message, state: FSMContext):
    await state.update_data(size=message.text)
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π")],
        [KeyboardButton(text="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π")],
        [KeyboardButton(text="–ú–∏–Ω–∏–º–∞–ª–∏–∑–º")]
    ], resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∫—É—Ö–Ω–∏:", reply_markup=keyboard)
    await state.set_state(Form.style)

@dp.message(Form.style)
async def process_style(message: types.Message, state: FSMContext):
    await state.update_data(style=message.text)
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–ú–î–§")],
        [KeyboardButton(text="–î–°–ü")],
        [KeyboardButton(text="–®–ø–æ–Ω")]
    ], resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:", reply_markup=keyboard)
    await state.set_state(Form.material)

@dp.message(Form.material)
async def process_material(message: types.Message, state: FSMContext):
    await state.update_data(material=message.text)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∏–¥–µ–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã?")
    await state.set_state(Form.idea)

@dp.message(Form.idea)
async def finish_form(message: types.Message, state: FSMContext):
    await state.update_data(idea=message.text)
    data = await state.get_data()

    summary = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n"
        f"üìç –†–∞–∑–º–µ—Ä—ã: {data['size']}\n"
        f"üé® –°—Ç–∏–ª—å: {data['style']}\n"
        f"üß± –ú–∞—Ç–µ—Ä–∏–∞–ª: {data['material']}\n"
        f"üí° –ò–¥–µ—è: {data['idea']}\n"
        f"\n–û—Ç: @{message.from_user.username or '–ë–µ–∑ username'}"
    )

    try:
        await bot.send_message(chat_id=ADMIN_ID, text=summary)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

    if sheet:
        try:
            now = datetime.now().strftime("%Y-%m-%d %H:%M")
            row = [now, message.from_user.username or "–ë–µ–∑ username", data['size'], data['style'], data['material'], data['idea']]
            sheet.append_row(row)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
    else:
        print("Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã")

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    await state.clear()

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())