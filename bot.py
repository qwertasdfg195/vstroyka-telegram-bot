import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8327997405:AAE32BUJEImAtfYmPlyxmRAB8fcKRnC-Vh0"
ADMIN_ID = 648338940
SPREADSHEET_ID = "1KiICzYA44y9Y-emnUiA53VOt2jW0h_8FrdOP-DLRR6Y"

# === Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1

# === Telegram Bot ===
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

class Form(StatesGroup):
    size = State()
    style = State()
    material = State()
    idea = State()

@dp.message_handler(Command("start"))
async def start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üì∏ –ì–æ—Ç–æ–≤—ã–µ –∫—É—Ö–Ω–∏", "üß© –°–æ–±—Ä–∞—Ç—å —Å–≤–æ—é –∫—É—Ö–Ω—é")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –í—Å—Ç—Ä–æ–π–∫–∞ –ú–µ–±–µ–ª—å.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message_handler(Text(equals="üì∏ –ì–æ—Ç–æ–≤—ã–µ –∫—É—Ö–Ω–∏"))
async def send_catalog(message: types.Message):
    with open("catalog.pdf", "rb") as pdf_file:
        await message.answer_document(pdf_file, caption="üìò –ù–∞—à –∫–∞—Ç–∞–ª–æ–≥ –∫—É—Ö–æ–Ω—å")

@dp.message_handler(Text(equals="üß© –°–æ–±—Ä–∞—Ç—å —Å–≤–æ—é –∫—É—Ö–Ω—é"))
async def start_form(message: types.Message):
    await Form.size.set()
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –∫—É—Ö–Ω–∏ (–ø—Ä–∏–º–µ—Ä: 2.5–º √ó 2.0–º):")

@dp.message_handler(state=Form.size)
async def get_size(message: types.Message, state: FSMContext):
    await state.update_data(size=message.text)
    await Form.style.set()
    await message.answer("–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è? (–∫–ª–∞—Å—Å–∏–∫–∞, –º–æ–¥–µ—Ä–Ω, –º–∏–Ω–∏–º–∞–ª–∏–∑–º –∏ —Ç.–¥.)")

@dp.message_handler(state=Form.style)
async def get_style(message: types.Message, state: FSMContext):
    await state.update_data(style=message.text)
    await Form.material.set()
    await message.answer("–ö–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª–µ–Ω? (–ú–î–§, –õ–î–°–ü, –º–∞—Å—Å–∏–≤ –∏ —Ç.–¥.)")

@dp.message_handler(state=Form.material)
async def get_material(message: types.Message, state: FSMContext):
    await state.update_data(material=message.text)
    await Form.idea.set()
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∏–¥–µ—è –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –¥–∏–∑–∞–π–Ω—É?")

@dp.message_handler(state=Form.idea)
async def finish_form(message: types.Message, state: FSMContext):
    await state.update_data(idea=message.text)
    data = await state.get_data()

    summary = (
        f"üßæ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n"
        f"üìê –†–∞–∑–º–µ—Ä—ã: {data['size']}\n"
        f"üé® –°—Ç–∏–ª—å: {data['style']}\n"
        f"ü™µ –ú–∞—Ç–µ—Ä–∏–∞–ª: {data['material']}\n"
        f"üí° –ò–¥–µ—è: {data['idea']}\n"
        f"\n–û—Ç: @{message.from_user.username or '–ë–µ–∑ username'}"
    )

    await bot.send_message(chat_id=ADMIN_ID, text=summary)

    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    row = [now, message.from_user.username or "–ë–µ–∑ username", data['size'], data['style'], data['material'], data['idea']]
    sheet.append_row(row)

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    await state.finish()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
