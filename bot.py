import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, Text
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8327997405:AAE32BUJEImAtfYmPlyxmRAB8fcKRnC-Vh0"
ADMIN_ID = 648338940
SPREADSHEET_ID = "1KiICzYA44y9Y-emnUiA53VOt2jW0h_8FrdOP-DLRR6Y"

# === Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1

# === Telegram Bot ===
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class Form(StatesGroup):
    size = State()
    style = State()
    material = State()
    idea = State()

@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üì∏ –ì–æ—Ç–æ–≤—ã–µ –∫—É—Ö–Ω–∏", "üß© –°–æ–±—Ä–∞—Ç—å —Å–≤–æ—é –∫—É—Ö–Ω—é")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –í—Å—Ç—Ä–æ–π–∫–∞ –ú–µ–±–µ–ª—å.")
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message(Text("üì∏ –ì–æ—Ç–æ–≤—ã–µ –∫—É—Ö–Ω–∏"))
async def send_catalog(message: types.Message):
    with open("catalog.pdf", "rb") as pdf_file:
        await message.answer_document(pdf_file, caption="üìò –ù–∞—à –∫–∞—Ç–∞–ª–æ–≥ –∫—É—Ö–æ–Ω—å")

@dp.message(Text("üß© –°–æ–±—Ä–∞—Ç—å —Å–≤–æ—é –∫—É—Ö–Ω—é"))
async def start_form(message: types.Message, state: FSMContext):
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –∫—É—Ö–Ω–∏ (–ø—Ä–∏–º–µ—Ä: 2.5–º √ó 2.0–º):")
    await state.set_state(Form.size)

@dp.message(Form.size)
async def get_size(message: types.Message, state: FSMContext):
    await state.update_data(size=message.text)
    await message.answer("–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è? (–∫–ª–∞—Å—Å–∏–∫–∞, –º–æ–¥–µ—Ä–Ω, –º–∏–Ω–∏–º–∞–ª–∏–∑–º –∏ —Ç.–¥.)")
    await state.set_state(Form.style)

@dp.message(Form.style)
async def get_style(message: types.Message, state: FSMContext):
    await state.update_data(style=message.text)
    await message.answer("–ö–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª–µ–Ω? (–ú–î–§, –õ–î–°–ü, –º–∞—Å—Å–∏–≤ –∏ —Ç.–¥.)")
    await state.set_state(Form.material)

@dp.message(Form.material)
async def get_material(message: types.Message, state: FSMContext):
    await state.update_data(material=message.text)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∏–¥–µ—è –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –¥–∏–∑–∞–π–Ω—É?")
    await state.set_state(Form.idea)

@dp.message(Form.idea)
async def finish_form(message: types.Message, state: FSMContext):
    await state.update_data(idea=message.text)
    data = await state.get_data()

    summary = (
        f"üßæ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:

"
        f"üìê –†–∞–∑–º–µ—Ä—ã: {data['size']}
"
        f"üé® –°—Ç–∏–ª—å: {data['style']}
"
        f"ü™µ –ú–∞—Ç–µ—Ä–∏–∞–ª: {data['material']}
"
        f"üí° –ò–¥–µ—è: {data['idea']}
"
        f"
–û—Ç: @{message.from_user.username or '–ë–µ–∑ username'}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    await bot.send_message(chat_id=ADMIN_ID, text=summary)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    row = [now, message.from_user.username or "–ë–µ–∑ username", data['size'], data['style'], data['material'], data['idea']]
    sheet.append_row(row)

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
