import asyncio
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

if not TOKEN or not ADMIN_ID or not SPREADSHEET_ID:
    raise ValueError(
        "BOT_TOKEN, ADMIN_ID and SPREADSHEET_ID must be provided in environment variables"
    )

ADMIN_ID = int(ADMIN_ID)

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive",
]
try:
    credentials = ServiceAccountCredentials.from_json_keyfile_name(
        "credentials.json", scope
    )
    client = gspread.authorize(credentials)
    sheet = client.open_by_key(SPREADSHEET_ID).sheet1
except Exception as e:
    print(f"Failed to connect to Google Sheets: {e}")
    sheet = None

# ====== –ö–Ω–æ–ø–∫–∏ ======
BACK_BTN = "üîô –í –º–µ–Ω—é"

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã (–¥–æ–±–∞–≤–∏–ª shape)
class Form(StatesGroup):
    size = State()
    shape = State()      # NEW
    style = State()
    material = State()
    idea = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command("start"))
async def start_form(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton(text="üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥"),
        KeyboardButton(text="üß© –°–æ–±—Ä–∞—Ç—å —Å–≤–æ—é –∫—É—Ö–Ω—é")
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –∫—É—Ö–Ω—é.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –ö–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
@dp.message(F.text == BACK_BTN)
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton(text="üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥"),
        KeyboardButton(text="üß© –°–æ–±—Ä–∞—Ç—å —Å–≤–æ—é –∫—É—Ö–Ω—é")
    )
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
@dp.message(F.text == "üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥")
async def send_catalog(message: types.Message):
    try:
        file = FSInputFile("catalog.pdf")
        await message.answer_document(file, caption="üìò –í–æ—Ç –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ –∫—É—Ö–æ–Ω—å.")
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞.")

# –ó–∞–ø—É—Å–∫ —Ñ–æ—Ä–º—ã
@dp.message(F.text == "üß© –°–æ–±—Ä–∞—Ç—å —Å–≤–æ—é –∫—É—Ö–Ω—é")
async def start_custom_kitchen(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=BACK_BTN)]],
        resize_keyboard=True
    )
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –∫—É—Ö–Ω–∏ (–≤ —Å–º, —à–∏—Ä–∏–Ω–∞ √ó –≤—ã—Å–æ—Ç–∞):", reply_markup=kb)
    await state.set_state(Form.size)

@dp.message(Form.size)
async def process_size(message: types.Message, state: FSMContext):
    if message.text == BACK_BTN:
        return await back_to_menu(message, state)

    await state.update_data(size=message.text)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä—è–º–∞—è")],
            [KeyboardButton(text="–£–≥–ª–æ–≤–∞—è")],
            [KeyboardButton(text="–ü-–æ–±—Ä–∞–∑–Ω–∞—è")],
            [KeyboardButton(text=BACK_BTN)]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –∫—É—Ö–Ω–∏:", reply_markup=kb)
    await state.set_state(Form.shape)

@dp.message(Form.shape)
async def process_shape(message: types.Message, state: FSMContext):
    if message.text == BACK_BTN:
        return await back_to_menu(message, state)

    await state.update_data(shape=message.text)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π")],
            [KeyboardButton(text="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π")],
            [KeyboardButton(text="–ú–∏–Ω–∏–º–∞–ª–∏–∑–º")],
            [KeyboardButton(text=BACK_BTN)]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∫—É—Ö–Ω–∏:", reply_markup=kb)
    await state.set_state(Form.style)

@dp.message(Form.style)
async def process_style(message: types.Message, state: FSMContext):
    if message.text == BACK_BTN:
        return await back_to_menu(message, state)

    await state.update_data(style=message.text)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–µ—Ä–µ–≤–æ")],
            [KeyboardButton(text="–ê–∫—Ä–∏–ª")],
            [KeyboardButton(text="–ü–ª–∞—Å—Ç–∏–∫")],
            [KeyboardButton(text="–ù–µ –∑–Ω–∞—é")],   # NEW
            [KeyboardButton(text=BACK_BTN)]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:", reply_markup=kb)
    await state.set_state(Form.material)

@dp.message(Form.material)
async def process_material(message: types.Message, state: FSMContext):
    if message.text == BACK_BTN:
        return await back_to_menu(message, state)

    await state.update_data(material=message.text)
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=BACK_BTN)]], resize_keyboard=True)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∏–¥–µ–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã?", reply_markup=kb)
    await state.set_state(Form.idea)

@dp.message(Form.idea)
async def finish_form(message: types.Message, state: FSMContext):
    if message.text == BACK_BTN:
        return await back_to_menu(message, state)

    await state.update_data(idea=message.text)
    data = await state.get_data()

    summary = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n"
        f"üìè –†–∞–∑–º–µ—Ä—ã: {data.get('size')}\n"
        f"üß© –§–æ—Ä–º–∞: {data.get('shape')}\n"
        f"üé® –°—Ç–∏–ª—å: {data.get('style')}\n"
        f"üß± –ú–∞—Ç–µ—Ä–∏–∞–ª: {data.get('material')}\n"
        f"üí° –ò–¥–µ—è: {data.get('idea')}\n"
        f"\n–û—Ç: @{message.from_user.username or '–ë–µ–∑ username'}"
    )

    await bot.send_message(chat_id=ADMIN_ID, text=summary)

    now = datetime.now().strftime("%%Y-%m-%d %%H:%M")
    # –¥–æ–±–∞–≤–∏–ª 'shape' –≤ —Ç–∞–±–ª–∏—Ü—É
    row = [
        now,
        message.from_user.username or "–ë–µ–∑ username",
        data.get("size"),
        data.get("shape"),
        data.get("style"),
        data.get("material"),
        data.get("idea"),
    ]

    if sheet:
        try:
            sheet.append_row(row)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
    else:
        print("Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ –∑–∞—è–≤–∫–∏")

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    await state.clear()
    # –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    await start_form(message, state)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
